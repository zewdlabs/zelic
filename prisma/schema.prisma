// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  username      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  teams     Membership[]

  @@index([email])
  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Team {
  id   String @id @default(cuid())
  name String

  slug        String? @unique
  logo        String?
  appLogo     String?
  appIconLogo String?
  bio         String?

  members Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sites     sites[]
  apiKeys   ApiKey[]

  @@index([slug])
  @@map(name: "teams")
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model Membership {
  accepted Boolean @default(false)

  role MembershipRole @default(MEMBER)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
  @@map(name: "memberships")
}

model ApiKey {
  id        String @id @unique @default(cuid())
  hashedKey String @unique()

  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  Team       Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String?

  @@index([teamId])
  @@map(name: "api_keys")
}

model sites {
  id   String @id @default(cuid())
  name String
  url  String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
  @@map(name: "sites")
}
